// Code generated by ent, DO NOT EDIT.

package user

import (
	"bit-project/gateway/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// UID applies equality check predicate on the "uid" field. It's identical to UIDEQ.
func UID(v uuid.UUID) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUID, v))
}

// KakaoSub applies equality check predicate on the "kakao_sub" field. It's identical to KakaoSubEQ.
func KakaoSub(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldKakaoSub, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldName, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// RefreshToken applies equality check predicate on the "refresh_token" field. It's identical to RefreshTokenEQ.
func RefreshToken(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldRefreshToken, v))
}

// LastLoginDate applies equality check predicate on the "last_login_date" field. It's identical to LastLoginDateEQ.
func LastLoginDate(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLastLoginDate, v))
}

// UIDEQ applies the EQ predicate on the "uid" field.
func UIDEQ(v uuid.UUID) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUID, v))
}

// UIDNEQ applies the NEQ predicate on the "uid" field.
func UIDNEQ(v uuid.UUID) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUID, v))
}

// UIDIn applies the In predicate on the "uid" field.
func UIDIn(vs ...uuid.UUID) predicate.User {
	return predicate.User(sql.FieldIn(FieldUID, vs...))
}

// UIDNotIn applies the NotIn predicate on the "uid" field.
func UIDNotIn(vs ...uuid.UUID) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUID, vs...))
}

// UIDGT applies the GT predicate on the "uid" field.
func UIDGT(v uuid.UUID) predicate.User {
	return predicate.User(sql.FieldGT(FieldUID, v))
}

// UIDGTE applies the GTE predicate on the "uid" field.
func UIDGTE(v uuid.UUID) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUID, v))
}

// UIDLT applies the LT predicate on the "uid" field.
func UIDLT(v uuid.UUID) predicate.User {
	return predicate.User(sql.FieldLT(FieldUID, v))
}

// UIDLTE applies the LTE predicate on the "uid" field.
func UIDLTE(v uuid.UUID) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUID, v))
}

// KakaoSubEQ applies the EQ predicate on the "kakao_sub" field.
func KakaoSubEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldKakaoSub, v))
}

// KakaoSubNEQ applies the NEQ predicate on the "kakao_sub" field.
func KakaoSubNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldKakaoSub, v))
}

// KakaoSubIn applies the In predicate on the "kakao_sub" field.
func KakaoSubIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldKakaoSub, vs...))
}

// KakaoSubNotIn applies the NotIn predicate on the "kakao_sub" field.
func KakaoSubNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldKakaoSub, vs...))
}

// KakaoSubGT applies the GT predicate on the "kakao_sub" field.
func KakaoSubGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldKakaoSub, v))
}

// KakaoSubGTE applies the GTE predicate on the "kakao_sub" field.
func KakaoSubGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldKakaoSub, v))
}

// KakaoSubLT applies the LT predicate on the "kakao_sub" field.
func KakaoSubLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldKakaoSub, v))
}

// KakaoSubLTE applies the LTE predicate on the "kakao_sub" field.
func KakaoSubLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldKakaoSub, v))
}

// KakaoSubContains applies the Contains predicate on the "kakao_sub" field.
func KakaoSubContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldKakaoSub, v))
}

// KakaoSubHasPrefix applies the HasPrefix predicate on the "kakao_sub" field.
func KakaoSubHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldKakaoSub, v))
}

// KakaoSubHasSuffix applies the HasSuffix predicate on the "kakao_sub" field.
func KakaoSubHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldKakaoSub, v))
}

// KakaoSubEqualFold applies the EqualFold predicate on the "kakao_sub" field.
func KakaoSubEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldKakaoSub, v))
}

// KakaoSubContainsFold applies the ContainsFold predicate on the "kakao_sub" field.
func KakaoSubContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldKakaoSub, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldName, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldEmail, v))
}

// RefreshTokenEQ applies the EQ predicate on the "refresh_token" field.
func RefreshTokenEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldRefreshToken, v))
}

// RefreshTokenNEQ applies the NEQ predicate on the "refresh_token" field.
func RefreshTokenNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldRefreshToken, v))
}

// RefreshTokenIn applies the In predicate on the "refresh_token" field.
func RefreshTokenIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldRefreshToken, vs...))
}

// RefreshTokenNotIn applies the NotIn predicate on the "refresh_token" field.
func RefreshTokenNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldRefreshToken, vs...))
}

// RefreshTokenGT applies the GT predicate on the "refresh_token" field.
func RefreshTokenGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldRefreshToken, v))
}

// RefreshTokenGTE applies the GTE predicate on the "refresh_token" field.
func RefreshTokenGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldRefreshToken, v))
}

// RefreshTokenLT applies the LT predicate on the "refresh_token" field.
func RefreshTokenLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldRefreshToken, v))
}

// RefreshTokenLTE applies the LTE predicate on the "refresh_token" field.
func RefreshTokenLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldRefreshToken, v))
}

// RefreshTokenContains applies the Contains predicate on the "refresh_token" field.
func RefreshTokenContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldRefreshToken, v))
}

// RefreshTokenHasPrefix applies the HasPrefix predicate on the "refresh_token" field.
func RefreshTokenHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldRefreshToken, v))
}

// RefreshTokenHasSuffix applies the HasSuffix predicate on the "refresh_token" field.
func RefreshTokenHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldRefreshToken, v))
}

// RefreshTokenEqualFold applies the EqualFold predicate on the "refresh_token" field.
func RefreshTokenEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldRefreshToken, v))
}

// RefreshTokenContainsFold applies the ContainsFold predicate on the "refresh_token" field.
func RefreshTokenContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldRefreshToken, v))
}

// LastLoginDateEQ applies the EQ predicate on the "last_login_date" field.
func LastLoginDateEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLastLoginDate, v))
}

// LastLoginDateNEQ applies the NEQ predicate on the "last_login_date" field.
func LastLoginDateNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLastLoginDate, v))
}

// LastLoginDateIn applies the In predicate on the "last_login_date" field.
func LastLoginDateIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldLastLoginDate, vs...))
}

// LastLoginDateNotIn applies the NotIn predicate on the "last_login_date" field.
func LastLoginDateNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLastLoginDate, vs...))
}

// LastLoginDateGT applies the GT predicate on the "last_login_date" field.
func LastLoginDateGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldLastLoginDate, v))
}

// LastLoginDateGTE applies the GTE predicate on the "last_login_date" field.
func LastLoginDateGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldLastLoginDate, v))
}

// LastLoginDateLT applies the LT predicate on the "last_login_date" field.
func LastLoginDateLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldLastLoginDate, v))
}

// LastLoginDateLTE applies the LTE predicate on the "last_login_date" field.
func LastLoginDateLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldLastLoginDate, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(sql.NotPredicates(p))
}
